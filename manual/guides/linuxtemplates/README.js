Ext.data.JsonP.linuxtemplates({"guide":"<h1 id='linuxtemplates-section-systemv-templates'>SystemV Templates</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/linuxtemplates-section-how-node-linux-creates-init-d-scripts'>How Node-Linux Creates init.d Scripts</a></li>\n<li><a href='#!/guide/linuxtemplates-section-custom-templates'>Custom Templates</a></li>\n<li><a href='#!/guide/linuxtemplates-section-using-custom-templates'>Using Custom Templates</a></li>\n</ol>\n</div>\n\n<p>There are many flavors of Linux, and while many of them cn be served using the stock\n<code>initd</code> template scripts packaged with node-linux, there may be occasions where a\ncustom template is a better fit for the server environment. This guide discusses how\ntemplates are built and how to create custom templates.</p>\n\n<h2 id='linuxtemplates-section-how-node-linux-creates-init-d-scripts'>How Node-Linux Creates init.d Scripts</h2>\n\n<p>Node-Linux uses the <a href=\"http://mustache.github.io/\">mustache</a> template library along with\nthe <a href=\"https://github.com/raycmorgan/Mu\">mu</a> module to create initd scripts. Templates are stored\nwithin the <code>node_modules/node-linux/lib/templates</code> directory. Debian and RedHat templates ship\nwith node-linux, which should also work for Ubuntu and CentOS/Fedora/AMI respectively.</p>\n\n<h2 id='linuxtemplates-section-custom-templates'>Custom Templates</h2>\n\n<p>Custom templates must implement a minimum of two functions to work properly: start and stop.\nNode-Linux uses these to start and stop scripts using syntax similar to what would be used on the\ncommand line to start/stop a service: <code>service myapp start</code> and <code>service myapp stop</code>.</p>\n\n<p>A custom init.d template is a mustache template, working with a simple\nfind/replace approach. There are several variables passed to the template when the script is\ngenerated.</p>\n\n<h3 id='linuxtemplates-section-variables'>Variables</h3>\n\n<p>Use the following variables in your template file. For example, to generate <code>name</code> in a\ncustom template, it should use the standard mustache syntax, i.e. <code>{{name}}</code>.</p>\n\n<p>The following variables are passed to every template. Custom templates can choose to use\nwhichever ones are necessary.</p>\n\n<ul>\n<li><code>label</code> <strong>(REQUIRED)</strong>: The label/service/file name. This is all lowercase with no special characters or spaces.</li>\n<li><code>servicesummary</code>: A short summary of the service. Typically used in header documentation within the script.</li>\n<li><code>servicedescription</code>: A detailed summary of the service. Typically used in header documentation within the script.</li>\n<li><code>author</code>: The author of the script or daemon. Typically used for documentation only.</li>\n<li><code>script</code> <strong>(REQUIRED)</strong>: The Node.js script that should be run as a daemon.</li>\n<li><code>description</code>: A common description of the service. The is usually used instead of the servicedescription.</li>\n<li><code>user</code>: A user account under which the process should run.</li>\n<li><code>group</code>: A user group under which the process should run.</li>\n<li><code>pidroot</code>: The root directory where the PID file is stored. Defaults to '/var/run'.</li>\n<li><code>logroot</code>: The root directory where log files are written. Defaults to '/var/log'.</li>\n<li><code>wrappercode</code> <strong>(REQUIRED)</strong>: The dynamically generated parameters for the wrapper script. This script\nis responsible for controlling restarts.</li>\n<li><code>env</code>: Environment variables that should be passed to the running process.</li>\n<li><code>created</code>: The date when the service is created. Typically used for documentation only.</li>\n<li><code>execpath</code> <strong>(REQUIRED)</strong>: The full path &amp; executable name of Node.JS.</li>\n</ul>\n\n\n<p>These variables are created by node-linux and passed to the template when it is rendered.\nTemplate authos should use the required variables at minimum.</p>\n\n<h2 id='linuxtemplates-section-using-custom-templates'>Using Custom Templates</h2>\n\n<p>Once a custom template has been created, it can be used by specifying the template attribute of\nthe service configuration. For example:</p>\n\n<pre><code>var Service = require('./').Service,\nsvc = new Service({\n  name: 'Hello World',\n  descirption: 'A hello world web server.',\n  template: '/path/to/custom/template'\n});\n</code></pre>\n\n<p>It's probably easiest to copy or study one of the existing templates when creating custom templates.</p>\n","title":"Custom Init.d Scripts"});